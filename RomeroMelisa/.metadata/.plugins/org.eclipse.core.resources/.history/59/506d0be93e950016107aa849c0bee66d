package modelo;

import java.util.GregorianCalendar;

public class Posicion {

	private int idPosicion;
	private double latitud;
	private double longitud;
	private int estadoCombustible;
	private GregorianCalendar fechaHora;

	// CONSTRUCTOR
	public Posicion(int idPosicion, double latitud, double longitud,
			int estadoCombustible, GregorianCalendar fechaHora) {

		this.idPosicion = idPosicion;
		this.latitud = latitud;
		this.longitud = longitud;
		this.estadoCombustible = estadoCombustible;
		this.fechaHora = fechaHora;
	}

	// GETTERS Y SETTERS

	public int getIdPosicion() {
		return idPosicion;
	}

	public void setIdPosicion(int idPosicion) {
		this.idPosicion = idPosicion;
	}

	public double getLatitud() {
		return latitud;
	}

	public void setLatitud(double latitud) {
		this.latitud = latitud;
	}

	public double getLongitud() {
		return longitud;
	}

	public void setLongitud(double longitud) {
		this.longitud = longitud;
	}

	public int getEstadoCombustible() {
		return estadoCombustible;
	}

	public void setEstadoCombustible(int estadoCombustible) {
		this.estadoCombustible = estadoCombustible;
	}

	public GregorianCalendar getFechaHora() {
		return fechaHora;
	}

	public void setFechaHora(GregorianCalendar fechaHora) {
		this.fechaHora = fechaHora;
	}

	public boolean esLongitudValida(double longitud) throws Exception {
		boolean valido = true;

		if ((longitud > -(Math.PI)) && (longitud < (Math.PI))) {
			return valido;
		} else
			throw new Exception("Error: el valor " + longitud
					+ " no es valido para la longitud");

	}

	public boolean esLatitudValida(double latitud) throws Exception {
		boolean valido = true;

		if ((longitud > -(Math.PI / 2)) && (longitud < (Math.PI / 2))) {
			return valido;
		} else
			throw new Exception("Error: el valor " + latitud
					+ " no es valido para la longitud");
	}

	public float distancia(Posicion posicion) {
		float d;
		float R = 6378;
		double lat1, lat2, long1, long2;
		lat1 = this.getLatitud();
		lat2 = posicion.getLatitud();
		long1 = this.getLongitud();
		long2 = posicion.getLongitud();

		d = (float) (2 * R * Math.asin(Math.sqrt(Math.pow(
				Math.sin(lat2 - lat1) / 2, 2)
				+ Math.cos(lat1)
				* Math.cos(lat2)
				* Math.pow(Math.sin(long2 - long1) / 2, 2))));

		return d;
	}

}
